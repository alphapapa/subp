#+title: SUBP: An elisp library for working with sub-processes

* Installation
#+begin_src emacs-lisp :lexical t
(elpaca (subp :host github :repo "progfolio/subp"))
#+end_src

* Examples

** subp-call

=(subp-call PROGRAM &rest ARGS)=

Run =PROGRAM= synchronously with =ARGS=.
Return a list of form: (EXITCODE STDOUT STDERR).


#+begin_src emacs-lisp :lexical t :results code replace
(subp-call "date")
#+end_src

#+begin_src emacs-lisp
(0 "Tue Aug 22 01:05:12 PM EDT 2023\n" nil)
#+end_src


#+begin_src emacs-lisp :lexical t :results code replace
(subp-call "date" "-x")
#+end_src

#+begin_src emacs-lisp
(1 nil
   "/usr/bin/date: invalid option -- 'x'\nTry '/usr/bin/date --help' for more information.\n")
#+end_src

** subp-with

=(subp-with RESULT &rest BODY)=

Provide anaphoric =RESULT= bindings for duration of =BODY=.
=RESULT= must be an expression which evaluates to a list of form:
(EXITCODE STDOUT STDERR)
Anaphoric bindings provided:
- result :: the raw process result list
- exit :: the exit code of the process
- success :: t if process exited with exit code 0
- failure :: t if process did not invoke or exited with a nonzero code
- stdout :: output of stdout
- stderr :: output of stderr

#+begin_src emacs-lisp :lexical t :results replace
(subp-with (subp-call "date")
  (string-join
   (list (format "result: %S" result)
         (format "exit: %d" exit)
         (format "success: %s" success)
         (format "failure: %s" failure)
         (format "stdout: %s" stdout)
         (format "stderr: %s" stderr))
   "\n"))
#+end_src

#+begin_example
 result: (0 "Tue Aug 22 01:07:06 PM EDT 2023
 " nil)
 exit: 0
 success: t
 failure: nil
 stdout: Tue Aug 22 01:07:06 PM EDT 2023

 stderr: nil
#+end_example

** subp-output

=(subp-output PROGRAM &rest ARGS)=

Return output of running =PROGRAM= with =ARGS=.
If the command returns a nonzero exit code, signal an error.

#+begin_src emacs-lisp :lexical t :results code replace
(subp-output "date")
#+end_src

#+begin_src emacs-lisp
"Tue Aug 22 01:07:22 PM EDT 2023\n"
#+end_src

#+begin_src emacs-lisp :lexical t :results code replace
(condition-case err
    (subp-output "date" "-x")
  (error (message "%S" err)))
#+end_src

#+begin_src emacs-lisp
"(error \"date exited with code 1: /usr/bin/date: invalid option -- 'x'\nTry '/usr/bin/date --help' for more information.\n\")"
#+end_src

** subp-cond

=(subp-cond ARGS &rest CONDITIONS)=

Eval =CONDITIONS= in context of =subp-with-call= with =ARGS=.

#+begin_src emacs-lisp :lexical t :results code replace
(subp-cond ("date" "-r")
  (success stdout)
  (failure stderr))
#+end_src

#+begin_src emacs-lisp
"/usr/bin/date: option requires an argument -- 'r'\nTry '/usr/bin/date --help' for more information.\n"
#+end_src

#+begin_src emacs-lisp :lexical t :results code replace
(subp-cond ("date" "-R")
  (success stdout)
  (failure stderr))
#+end_src

#+begin_src emacs-lisp
"Tue, 22 Aug 2023 13:10:28 -0400\n"
#+end_src
